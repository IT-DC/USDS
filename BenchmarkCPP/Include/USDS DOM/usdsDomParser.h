// This file must be autogenerated
#ifndef USDS_DOM_PARSER
#define USDS_DOM_PARSER

#define USDS_VOUCHER 2
#define USDS_TICKET_SALES 1

#define USDS_DOM_UTF8 2

#include <string>
#include <list>

class UsdsDomParser;
class UsdsTicketSales;

class UsdsObject
{
public:
	UsdsObject() { };
	virtual ~UsdsObject() { };

	virtual int getType() = 0;
	UsdsObject* getNextObject() { return next; };
	void setNextObject(UsdsObject* object) { next = object; };

protected:
	UsdsObject* previous;
	UsdsObject* next;
	UsdsObject* parent;

	UsdsDomParser* allocator;
};


class UsdsVoucher : public UsdsObject
{
public:
	UsdsVoucher(UsdsDomParser* alloc) { allocator = alloc;};
	~UsdsVoucher() { };

	inline int getType() { return USDS_VOUCHER; }
	inline void init(UsdsTicketSales* parent_object, UsdsVoucher* previous_object, UsdsVoucher* next_object) { previous = (UsdsObject*)previous_object; next = (UsdsObject*)next_object; parent = (UsdsObject*)parent_object; };

	int voucher_number;
	double summ;
	int setGoods_name(int encode, const char* text) { if (encode == USDS_DOM_UTF8) goods_name = text; else return -1; return 0; }
	const char* getGoods_name() { return goods_name.c_str(); }
	long long time_of_sell;
	bool status;

private:
	std::string goods_name;

};

class UsdsTicketSales : public UsdsObject
{
public:
	UsdsTicketSales(UsdsDomParser* alloc) { allocator = alloc; };
	~UsdsTicketSales() { };

	inline int getType() { return USDS_TICKET_SALES; }
	inline void init(UsdsObject* previous_object, UsdsObject* next_object) { previous = previous_object; next = next_object; parent = 0; firstInVouchers = 0; lastInVouchers = 0; vouchersSize = 0; };
	int getVouchersSize() { return vouchersSize; };

	int shiftNumber;
	int cashRegister;
	long long startShift;
	long long endShift;
	UsdsVoucher* addToVouchers();
	UsdsVoucher* getFirstInVouchers() { return firstInVouchers; };


private:
	UsdsVoucher* firstInVouchers;
	UsdsVoucher* lastInVouchers;
	int vouchersSize;

};

class UsdsDomParser
{
public:
	UsdsDomParser();
	~UsdsDomParser();

	// Settings
	int setUsdsVersion(unsigned char major, unsigned char minor);
	int setDictionaryVersion(unsigned char major, unsigned char minor);
	int getUsdsVersion(int* major, int* minor);
	int getDictionaryVersion(int* major, int* minor);

	// DOM Objects
	UsdsTicketSales* addUsdsTicketSales();
	UsdsVoucher* addUsdsVoucher();

	UsdsTicketSales* getFirstUsdsTicketSales() { return (UsdsTicketSales*)firstRoot; };

	// Serialization
	int addHead();
	int addDictionary();
	int addBody();
	int getUSDS(unsigned char** data, int* size);

	// Deserialization
	int parse(unsigned char* data, int data_size);

	void clean();		// it does not release memory in buffer


private:

	// memory for objects
	std::list<UsdsTicketSales> buffUSDSTicketSales;
	std::list<UsdsVoucher> buffUSDSVoucher;
	std::list<UsdsTicketSales>::iterator lastUSDSTicketSales;
	std::list<UsdsVoucher>::iterator lastUSDSVoucher;

	// Root
	UsdsObject* firstRoot;
	UsdsObject* lastRoot;

	// settings
	unsigned char usds_major;
	unsigned char usds_minor;
	unsigned char dictionary_major;
	unsigned char dictionary_minor;
	int full_dictionary_version;

	// Current output status
	bool out_head_added;
	bool out_dictionary_added;
	bool out_body_added;
	
	// Current input status
	bool in_head_included;
	bool in_dictionary_included;


	// Buffer for USDS output document
	int out_default_doc_size;
	unsigned char* out_usds_buff;
	unsigned char* out_buff_last_pos;		// It is a position after last valid position in the Buffer. The Buffer size is buff_last_pos - usds_buff
	unsigned char* out_buff_current_pos;	// Last claen position in the Buffer. The document size is buff_current_pos - usds_buff
	inline int resizeArray(int minIncrease);
	
	// Buffer for USDS input document
	unsigned char* in_usds_buff;
	unsigned char* in_buff_last_pos;		// It is a position after last valid position in the Buffer. The Buffer size is buff_last_pos - usds_buff
	unsigned char* in_buff_current_pos;		// Last unread position in the Buffer. The document size is buff_current_pos - usds_buff
	unsigned char* in_buff_body_pos;		// The first byte of body, after tag 'B'
	unsigned char* in_buff_body_last_pos;	// The last body position - tag 0

	// serialization
	inline int addVarint(int value);
	inline void addLEInt(int value);
	inline void addLETimestamp64(time_t value);
	inline void addLEDouble(double value);
	inline int addStringUTF8NoConvert(const char* value, int max_size);
	inline void addBool(bool value);

	// deserialization
	inline int getVarint(int* value);
	inline void getLEInt(int*value);
	inline void setLETimestamp64(time_t* value);
	inline void setLEDouble(double* value);
	inline int setStringUTF8NoConvert(char* value, int max_size);
	inline void setBool(bool* value);

};


#endif