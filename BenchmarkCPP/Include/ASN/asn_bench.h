/*************************************************************/
/* Copyright (C) 2015 OSS Nokalva, Inc.  All rights reserved.*/
/*************************************************************/

/* THIS FILE IS PROPRIETARY MATERIAL OF OSS NOKALVA, INC.
 * AND MAY BE USED ONLY BY DIRECT LICENSEES OF OSS NOKALVA, INC.
 * THIS FILE MAY NOT BE DISTRIBUTED.
 * THIS COPYRIGHT STATEMENT MAY NOT BE REMOVED. */

/* This file was generated by a TRIAL version of the OSS ASN.1 Tools.
 * Applications built using this file can be executed only on the machine
 * on which you run the OSS ASN.1 compiler. */

/* Generated for: IT-DC (Trial), License 70926Z. */
/* Abstract syntax: asn_bench */
/* Created: Wed Jul 01 14:40:19 2015 */
/* ASN.1/C++ compiler version: 6.1 */
/* Code generated for runtime version 6.1 or later */
/* Compiler operating system: Windows */
/* Compiler machine type: Intel x86 */
/* Target operating system: Windows */
/* Target machine type: Intel x86 */
/* C++ compiler options required: -Zp8 (Microsoft) */
/* ASN.1 compiler options and file names specified:
 * -warningmessages -informatorymessages -2008 -per -ber -der -xer -oer -root
 * -sampleCode -messageFormat msvc -allow universaltags
 * D:/Temp/61/ASN/asn_bench.asn
 */

#ifndef OSS_asn_bench
#define OSS_asn_bench

#include "oss.h"
#include "asn1.h"

/* Representation types */

class OSS_PUBLIC AsnVoucher   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 voucherNumber;
    typedef double summ;
    typedef OssString goodsName;
    typedef OssUTCTime timeOfSell;
    typedef ossBoolean status;

    AsnVoucher();
    AsnVoucher(const AsnVoucher &);
    AsnVoucher(voucherNumber, summ, const goodsName &, const timeOfSell &, status);

    AsnVoucher & operator = (const AsnVoucher &);
    int operator == (const AsnVoucher &) const;
    int operator != (const AsnVoucher &) const;

    voucherNumber & get_voucherNumber();
    voucherNumber get_voucherNumber() const;
    void set_voucherNumber(voucherNumber);

    summ & get_summ();
    summ get_summ() const;
    void set_summ(summ);

    goodsName & get_goodsName();
    const goodsName & get_goodsName() const;
    void set_goodsName(const goodsName &);

    timeOfSell & get_timeOfSell();
    const timeOfSell & get_timeOfSell() const;
    void set_timeOfSell(const timeOfSell &);

    status & get_status();
    status get_status() const;
    void set_status(status);
private:
    voucherNumber voucherNumber_field;
    summ summ_field;
    goodsName goodsName_field;
    timeOfSell timeOfSell_field;
    status status_field;
};

class OSS_PUBLIC __seqof1 : public OssList  /* SEQUENCE OF */
{
public:
    typedef AsnVoucher component;

    __seqof1();
    __seqof1(const __seqof1 &);
    ~__seqof1();

    __seqof1 & operator = (const __seqof1 &);
    int operator == (const __seqof1 &) const;
    int operator != (const __seqof1 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__seqof1 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __seqof1 *);

    int remove_front();
    int remove_after(OssIndex);

    __seqof1 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC AsnTicketSales   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 shiftNumber;
    typedef OSS_INT32 cashRegister;
    typedef OssUTCTime startShift;
    typedef OssUTCTime endShift;
    typedef __seqof1 vouchers;

    AsnTicketSales();
    AsnTicketSales(const AsnTicketSales &);
    AsnTicketSales(shiftNumber, cashRegister, const startShift &, const endShift &, 
	const vouchers &);

    AsnTicketSales & operator = (const AsnTicketSales &);
    int operator == (const AsnTicketSales &) const;
    int operator != (const AsnTicketSales &) const;

    shiftNumber & get_shiftNumber();
    shiftNumber get_shiftNumber() const;
    void set_shiftNumber(shiftNumber);

    cashRegister & get_cashRegister();
    cashRegister get_cashRegister() const;
    void set_cashRegister(cashRegister);

    startShift & get_startShift();
    const startShift & get_startShift() const;
    void set_startShift(const startShift &);

    endShift & get_endShift();
    const endShift & get_endShift() const;
    void set_endShift(const endShift &);

    vouchers & get_vouchers();
    const vouchers & get_vouchers() const;
    void set_vouchers(const vouchers &);
private:
    shiftNumber shiftNumber_field;
    cashRegister cashRegister_field;
    startShift startShift_field;
    endShift endShift_field;
    vouchers vouchers_field;
};

/* Universal PDU class */

class OSS_PUBLIC asn_bench_PDU : public UniversalPDU {
public:
    asn_bench_PDU();
    void set_AsnTicketSales(AsnTicketSales &);
    AsnTicketSales *get_AsnTicketSales() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_AsnTicketSales(const AsnTicketSales &);
    const AsnTicketSales *get_const_AsnTicketSales() const;
#endif
};

/* Specific PDU classes */

class OSS_PUBLIC AsnTicketSales_PDU : public ConcretePDU {
public:
    AsnTicketSales_PDU();
    void set_data(AsnTicketSales &);
    AsnTicketSales *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const AsnTicketSales & d);
    const AsnTicketSales *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

/* Control object class */

class OSS_PUBLIC asn_bench_Control : public OssControl {
public:
    asn_bench_Control();
    asn_bench_Control(const asn_bench_Control &);
};

#endif // OSS_asn_bench
