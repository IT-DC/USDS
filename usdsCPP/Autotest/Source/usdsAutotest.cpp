#include "usdsAutotest.h"

#include <ctime>
#include <list>
#include <string.h>
#include <iostream>

#include "errorMessage.h"

// Ignore worning "function or variable may be unsafe" for 'asctime'
#pragma warning (disable : 4996)


int32_t main(int32_t argc, char* argv[])
{
	bool close_console = false;
	bool stop_after_first_error = false;
	const char* execute_only = 0;
	std::list<const char*> ignore_tests = 
	{
		
	};

	time_t t = time(0);
	std::cout << std::asctime(std::localtime(&t)) << " Begin autotests\n";
	if (execute_only != 0)
		std::cout << "Only '" << execute_only << "' will be executed\n";

	int test_number = 0;
	int successful_test_number = 0;
	int ignored_test_number = 0;

	// BEGINT AUTOGENERATED TESTS

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "BinaryOutputTest") == 0 || strcmp(execute_only, "BinaryOutputTest::test_1") == 0)
		{
			try
			{
				BinaryOutputTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_1' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "BinaryOutputTest") == 0 || strcmp(*it, "BinaryOutputTest::test_1") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_1' ignored\n";
		}
		else
		{
			try
			{
				BinaryOutputTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "BinaryOutputTest") == 0 || strcmp(execute_only, "BinaryOutputTest::test_2") == 0)
		{
			try
			{
				BinaryOutputTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_2' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "BinaryOutputTest") == 0 || strcmp(*it, "BinaryOutputTest::test_2") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_2' ignored\n";
		}
		else
		{
			try
			{
				BinaryOutputTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "BinaryOutputTest") == 0 || strcmp(execute_only, "BinaryOutputTest::test_3") == 0)
		{
			try
			{
				BinaryOutputTest::test_3();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_3' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_3' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_3' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_3' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_3' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_3' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "BinaryOutputTest") == 0 || strcmp(*it, "BinaryOutputTest::test_3") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_3' ignored\n";
		}
		else
		{
			try
			{
				BinaryOutputTest::test_3();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_3' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_3' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_3' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_3' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_3' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "BinaryOutputTest") == 0 || strcmp(execute_only, "BinaryOutputTest::test_4") == 0)
		{
			try
			{
				BinaryOutputTest::test_4();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_4' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_4' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_4' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_4' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_4' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_4' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "BinaryOutputTest") == 0 || strcmp(*it, "BinaryOutputTest::test_4") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_4' ignored\n";
		}
		else
		{
			try
			{
				BinaryOutputTest::test_4();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_4' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_4' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_4' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_4' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_4' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "BinaryOutputTest") == 0 || strcmp(execute_only, "BinaryOutputTest::test_5") == 0)
		{
			try
			{
				BinaryOutputTest::test_5();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_5' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_5' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_5' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_5' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_5' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_5' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "BinaryOutputTest") == 0 || strcmp(*it, "BinaryOutputTest::test_5") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_5' ignored\n";
		}
		else
		{
			try
			{
				BinaryOutputTest::test_5();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_5' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_5' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_5' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_5' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_5' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "BinaryOutputTest") == 0 || strcmp(execute_only, "BinaryOutputTest::test_6") == 0)
		{
			try
			{
				BinaryOutputTest::test_6();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_6' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_6' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_6' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_6' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_6' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_6' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "BinaryOutputTest") == 0 || strcmp(*it, "BinaryOutputTest::test_6") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_6' ignored\n";
		}
		else
		{
			try
			{
				BinaryOutputTest::test_6();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_6' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_6' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_6' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_6' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_6' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "BinaryOutputTest") == 0 || strcmp(execute_only, "BinaryOutputTest::test_7") == 0)
		{
			try
			{
				BinaryOutputTest::test_7();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_7' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_7' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_7' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_7' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_7' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_7' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "BinaryOutputTest") == 0 || strcmp(*it, "BinaryOutputTest::test_7") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_7' ignored\n";
		}
		else
		{
			try
			{
				BinaryOutputTest::test_7();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_7' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_7' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_7' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_7' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_7' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "BinaryOutputTest") == 0 || strcmp(execute_only, "BinaryOutputTest::test_8") == 0)
		{
			try
			{
				BinaryOutputTest::test_8();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_8' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_8' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_8' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_8' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_8' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_8' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "BinaryOutputTest") == 0 || strcmp(*it, "BinaryOutputTest::test_8") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_8' ignored\n";
		}
		else
		{
			try
			{
				BinaryOutputTest::test_8();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_8' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_8' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_8' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_8' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_8' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "BinaryOutputTest") == 0 || strcmp(execute_only, "BinaryOutputTest::test_9") == 0)
		{
			try
			{
				BinaryOutputTest::test_9();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_9' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_9' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_9' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_9' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_9' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_9' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "BinaryOutputTest") == 0 || strcmp(*it, "BinaryOutputTest::test_9") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_9' ignored\n";
		}
		else
		{
			try
			{
				BinaryOutputTest::test_9();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_9' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_9' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_9' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_9' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_9' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "BinaryOutputTest") == 0 || strcmp(execute_only, "BinaryOutputTest::test_10") == 0)
		{
			try
			{
				BinaryOutputTest::test_10();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_10' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_10' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_10' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_10' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_10' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_10' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "BinaryOutputTest") == 0 || strcmp(*it, "BinaryOutputTest::test_10") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_10' ignored\n";
		}
		else
		{
			try
			{
				BinaryOutputTest::test_10();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_10' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_10' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_10' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_10' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_10' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "BinaryOutputTest") == 0 || strcmp(execute_only, "BinaryOutputTest::test_11") == 0)
		{
			try
			{
				BinaryOutputTest::test_11();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_11' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_11' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_11' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_11' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_11' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_11' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "BinaryOutputTest") == 0 || strcmp(*it, "BinaryOutputTest::test_11") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_11' ignored\n";
		}
		else
		{
			try
			{
				BinaryOutputTest::test_11();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_11' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_11' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_11' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_11' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_11' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "BinaryOutputTest") == 0 || strcmp(execute_only, "BinaryOutputTest::test_12") == 0)
		{
			try
			{
				BinaryOutputTest::test_12();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_12' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_12' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_12' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_12' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_12' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_12' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "BinaryOutputTest") == 0 || strcmp(*it, "BinaryOutputTest::test_12") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_12' ignored\n";
		}
		else
		{
			try
			{
				BinaryOutputTest::test_12();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_12' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_12' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_12' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_12' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_12' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "BinaryOutputTest") == 0 || strcmp(execute_only, "BinaryOutputTest::test_13") == 0)
		{
			try
			{
				BinaryOutputTest::test_13();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_13' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_13' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_13' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_13' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_13' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_13' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "BinaryOutputTest") == 0 || strcmp(*it, "BinaryOutputTest::test_13") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_13' ignored\n";
		}
		else
		{
			try
			{
				BinaryOutputTest::test_13();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_13' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_13' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_13' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_13' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_13' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "BinaryOutputTest") == 0 || strcmp(execute_only, "BinaryOutputTest::test_14") == 0)
		{
			try
			{
				BinaryOutputTest::test_14();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_14' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_14' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_14' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_14' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_14' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_14' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "BinaryOutputTest") == 0 || strcmp(*it, "BinaryOutputTest::test_14") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_14' ignored\n";
		}
		else
		{
			try
			{
				BinaryOutputTest::test_14();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_14' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_14' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_14' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_14' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_14' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "BinaryOutputTest") == 0 || strcmp(execute_only, "BinaryOutputTest::test_15") == 0)
		{
			try
			{
				BinaryOutputTest::test_15();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_15' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_15' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_15' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_15' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_15' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_15' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "BinaryOutputTest") == 0 || strcmp(*it, "BinaryOutputTest::test_15") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_15' ignored\n";
		}
		else
		{
			try
			{
				BinaryOutputTest::test_15();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_15' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_15' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_15' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_15' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_15' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "BinaryOutputTest") == 0 || strcmp(execute_only, "BinaryOutputTest::test_16") == 0)
		{
			try
			{
				BinaryOutputTest::test_16();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_16' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_16' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_16' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_16' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_16' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_16' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "BinaryOutputTest") == 0 || strcmp(*it, "BinaryOutputTest::test_16") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_16' ignored\n";
		}
		else
		{
			try
			{
				BinaryOutputTest::test_16();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_16' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_16' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_16' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_16' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_16' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "BinaryOutputTest") == 0 || strcmp(execute_only, "BinaryOutputTest::test_17") == 0)
		{
			try
			{
				BinaryOutputTest::test_17();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_17' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_17' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_17' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_17' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_17' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_17' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "BinaryOutputTest") == 0 || strcmp(*it, "BinaryOutputTest::test_17") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_17' ignored\n";
		}
		else
		{
			try
			{
				BinaryOutputTest::test_17();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_17' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_17' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_17' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_17' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryOutputTest::test_17' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsByteTest") == 0 || strcmp(execute_only, "UsdsByteTest::test_1") == 0)
		{
			try
			{
				UsdsByteTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsByteTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsByteTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsByteTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsByteTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsByteTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsByteTest::test_1' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsByteTest") == 0 || strcmp(*it, "UsdsByteTest::test_1") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsByteTest::test_1' ignored\n";
		}
		else
		{
			try
			{
				UsdsByteTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsByteTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsByteTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsByteTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsByteTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsByteTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsByteTest") == 0 || strcmp(execute_only, "UsdsByteTest::test_2") == 0)
		{
			try
			{
				UsdsByteTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsByteTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsByteTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsByteTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsByteTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsByteTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsByteTest::test_2' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsByteTest") == 0 || strcmp(*it, "UsdsByteTest::test_2") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsByteTest::test_2' ignored\n";
		}
		else
		{
			try
			{
				UsdsByteTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsByteTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsByteTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsByteTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsByteTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsByteTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsVarintTest") == 0 || strcmp(execute_only, "UsdsVarintTest::test_1") == 0)
		{
			try
			{
				UsdsVarintTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsVarintTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsVarintTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsVarintTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsVarintTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsVarintTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsVarintTest::test_1' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsVarintTest") == 0 || strcmp(*it, "UsdsVarintTest::test_1") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsVarintTest::test_1' ignored\n";
		}
		else
		{
			try
			{
				UsdsVarintTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsVarintTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsVarintTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsVarintTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsVarintTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsVarintTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsVarintTest") == 0 || strcmp(execute_only, "UsdsVarintTest::test_2") == 0)
		{
			try
			{
				UsdsVarintTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsVarintTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsVarintTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsVarintTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsVarintTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsVarintTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsVarintTest::test_2' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsVarintTest") == 0 || strcmp(*it, "UsdsVarintTest::test_2") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsVarintTest::test_2' ignored\n";
		}
		else
		{
			try
			{
				UsdsVarintTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsVarintTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsVarintTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsVarintTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsVarintTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsVarintTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsDoubleTest") == 0 || strcmp(execute_only, "UsdsDoubleTest::test_1") == 0)
		{
			try
			{
				UsdsDoubleTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsDoubleTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsDoubleTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsDoubleTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsDoubleTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsDoubleTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsDoubleTest::test_1' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsDoubleTest") == 0 || strcmp(*it, "UsdsDoubleTest::test_1") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsDoubleTest::test_1' ignored\n";
		}
		else
		{
			try
			{
				UsdsDoubleTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsDoubleTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsDoubleTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsDoubleTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsDoubleTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsDoubleTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsDoubleTest") == 0 || strcmp(execute_only, "UsdsDoubleTest::test_2") == 0)
		{
			try
			{
				UsdsDoubleTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsDoubleTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsDoubleTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsDoubleTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsDoubleTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsDoubleTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsDoubleTest::test_2' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsDoubleTest") == 0 || strcmp(*it, "UsdsDoubleTest::test_2") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsDoubleTest::test_2' ignored\n";
		}
		else
		{
			try
			{
				UsdsDoubleTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsDoubleTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsDoubleTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsDoubleTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsDoubleTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsDoubleTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsDoubleTest") == 0 || strcmp(execute_only, "UsdsDoubleTest::test_3") == 0)
		{
			try
			{
				UsdsDoubleTest::test_3();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsDoubleTest::test_3' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsDoubleTest::test_3' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsDoubleTest::test_3' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsDoubleTest::test_3' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsDoubleTest::test_3' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsDoubleTest::test_3' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsDoubleTest") == 0 || strcmp(*it, "UsdsDoubleTest::test_3") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsDoubleTest::test_3' ignored\n";
		}
		else
		{
			try
			{
				UsdsDoubleTest::test_3();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsDoubleTest::test_3' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsDoubleTest::test_3' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsDoubleTest::test_3' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsDoubleTest::test_3' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsDoubleTest::test_3' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "DictionaryStringTest") == 0 || strcmp(execute_only, "DictionaryStringTest::test_1") == 0)
		{
			try
			{
				DictionaryStringTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionaryStringTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionaryStringTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionaryStringTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionaryStringTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionaryStringTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionaryStringTest::test_1' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "DictionaryStringTest") == 0 || strcmp(*it, "DictionaryStringTest::test_1") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionaryStringTest::test_1' ignored\n";
		}
		else
		{
			try
			{
				DictionaryStringTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionaryStringTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionaryStringTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionaryStringTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionaryStringTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionaryStringTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsFloatTest") == 0 || strcmp(execute_only, "UsdsFloatTest::test_1") == 0)
		{
			try
			{
				UsdsFloatTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsFloatTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsFloatTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsFloatTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsFloatTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsFloatTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsFloatTest::test_1' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsFloatTest") == 0 || strcmp(*it, "UsdsFloatTest::test_1") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsFloatTest::test_1' ignored\n";
		}
		else
		{
			try
			{
				UsdsFloatTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsFloatTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsFloatTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsFloatTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsFloatTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsFloatTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsFloatTest") == 0 || strcmp(execute_only, "UsdsFloatTest::test_2") == 0)
		{
			try
			{
				UsdsFloatTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsFloatTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsFloatTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsFloatTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsFloatTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsFloatTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsFloatTest::test_2' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsFloatTest") == 0 || strcmp(*it, "UsdsFloatTest::test_2") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsFloatTest::test_2' ignored\n";
		}
		else
		{
			try
			{
				UsdsFloatTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsFloatTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsFloatTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsFloatTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsFloatTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsFloatTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsFloatTest") == 0 || strcmp(execute_only, "UsdsFloatTest::test_3") == 0)
		{
			try
			{
				UsdsFloatTest::test_3();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsFloatTest::test_3' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsFloatTest::test_3' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsFloatTest::test_3' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsFloatTest::test_3' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsFloatTest::test_3' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsFloatTest::test_3' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsFloatTest") == 0 || strcmp(*it, "UsdsFloatTest::test_3") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsFloatTest::test_3' ignored\n";
		}
		else
		{
			try
			{
				UsdsFloatTest::test_3();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsFloatTest::test_3' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsFloatTest::test_3' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsFloatTest::test_3' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsFloatTest::test_3' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsFloatTest::test_3' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsArrayTest") == 0 || strcmp(execute_only, "UsdsArrayTest::test_1") == 0)
		{
			try
			{
				UsdsArrayTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_1' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsArrayTest") == 0 || strcmp(*it, "UsdsArrayTest::test_1") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_1' ignored\n";
		}
		else
		{
			try
			{
				UsdsArrayTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsArrayTest") == 0 || strcmp(execute_only, "UsdsArrayTest::test_2") == 0)
		{
			try
			{
				UsdsArrayTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_2' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsArrayTest") == 0 || strcmp(*it, "UsdsArrayTest::test_2") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_2' ignored\n";
		}
		else
		{
			try
			{
				UsdsArrayTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsArrayTest") == 0 || strcmp(execute_only, "UsdsArrayTest::test_3") == 0)
		{
			try
			{
				UsdsArrayTest::test_3();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_3' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_3' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_3' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_3' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_3' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_3' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsArrayTest") == 0 || strcmp(*it, "UsdsArrayTest::test_3") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_3' ignored\n";
		}
		else
		{
			try
			{
				UsdsArrayTest::test_3();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_3' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_3' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_3' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_3' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_3' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsArrayTest") == 0 || strcmp(execute_only, "UsdsArrayTest::test_4") == 0)
		{
			try
			{
				UsdsArrayTest::test_4();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_4' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_4' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_4' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_4' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_4' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_4' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsArrayTest") == 0 || strcmp(*it, "UsdsArrayTest::test_4") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_4' ignored\n";
		}
		else
		{
			try
			{
				UsdsArrayTest::test_4();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_4' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_4' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_4' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_4' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_4' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsArrayTest") == 0 || strcmp(execute_only, "UsdsArrayTest::test_5") == 0)
		{
			try
			{
				UsdsArrayTest::test_5();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_5' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_5' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_5' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_5' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_5' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_5' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsArrayTest") == 0 || strcmp(*it, "UsdsArrayTest::test_5") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_5' ignored\n";
		}
		else
		{
			try
			{
				UsdsArrayTest::test_5();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_5' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_5' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_5' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_5' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_5' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsArrayTest") == 0 || strcmp(execute_only, "UsdsArrayTest::test_6") == 0)
		{
			try
			{
				UsdsArrayTest::test_6();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_6' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_6' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_6' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_6' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_6' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_6' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsArrayTest") == 0 || strcmp(*it, "UsdsArrayTest::test_6") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_6' ignored\n";
		}
		else
		{
			try
			{
				UsdsArrayTest::test_6();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_6' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_6' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_6' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_6' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_6' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsArrayTest") == 0 || strcmp(execute_only, "UsdsArrayTest::test_7") == 0)
		{
			try
			{
				UsdsArrayTest::test_7();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_7' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_7' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_7' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_7' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_7' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_7' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsArrayTest") == 0 || strcmp(*it, "UsdsArrayTest::test_7") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_7' ignored\n";
		}
		else
		{
			try
			{
				UsdsArrayTest::test_7();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_7' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_7' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_7' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_7' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_7' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsArrayTest") == 0 || strcmp(execute_only, "UsdsArrayTest::test_8") == 0)
		{
			try
			{
				UsdsArrayTest::test_8();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_8' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_8' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_8' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_8' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_8' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_8' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsArrayTest") == 0 || strcmp(*it, "UsdsArrayTest::test_8") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_8' ignored\n";
		}
		else
		{
			try
			{
				UsdsArrayTest::test_8();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_8' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_8' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_8' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_8' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_8' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsArrayTest") == 0 || strcmp(execute_only, "UsdsArrayTest::test_9") == 0)
		{
			try
			{
				UsdsArrayTest::test_9();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_9' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_9' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_9' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_9' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_9' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_9' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsArrayTest") == 0 || strcmp(*it, "UsdsArrayTest::test_9") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_9' ignored\n";
		}
		else
		{
			try
			{
				UsdsArrayTest::test_9();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_9' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_9' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_9' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_9' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_9' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsArrayTest") == 0 || strcmp(execute_only, "UsdsArrayTest::test_10") == 0)
		{
			try
			{
				UsdsArrayTest::test_10();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_10' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_10' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_10' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_10' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_10' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_10' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsArrayTest") == 0 || strcmp(*it, "UsdsArrayTest::test_10") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_10' ignored\n";
		}
		else
		{
			try
			{
				UsdsArrayTest::test_10();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_10' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_10' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_10' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_10' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_10' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsArrayTest") == 0 || strcmp(execute_only, "UsdsArrayTest::test_11") == 0)
		{
			try
			{
				UsdsArrayTest::test_11();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_11' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_11' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_11' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_11' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_11' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_11' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsArrayTest") == 0 || strcmp(*it, "UsdsArrayTest::test_11") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_11' ignored\n";
		}
		else
		{
			try
			{
				UsdsArrayTest::test_11();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_11' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_11' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_11' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_11' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_11' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsArrayTest") == 0 || strcmp(execute_only, "UsdsArrayTest::test_12") == 0)
		{
			try
			{
				UsdsArrayTest::test_12();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_12' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_12' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_12' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_12' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_12' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_12' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsArrayTest") == 0 || strcmp(*it, "UsdsArrayTest::test_12") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_12' ignored\n";
		}
		else
		{
			try
			{
				UsdsArrayTest::test_12();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_12' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_12' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_12' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_12' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_12' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsArrayTest") == 0 || strcmp(execute_only, "UsdsArrayTest::test_13") == 0)
		{
			try
			{
				UsdsArrayTest::test_13();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_13' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_13' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_13' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_13' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_13' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_13' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsArrayTest") == 0 || strcmp(*it, "UsdsArrayTest::test_13") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_13' ignored\n";
		}
		else
		{
			try
			{
				UsdsArrayTest::test_13();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_13' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_13' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_13' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_13' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_13' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsArrayTest") == 0 || strcmp(execute_only, "UsdsArrayTest::test_14") == 0)
		{
			try
			{
				UsdsArrayTest::test_14();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_14' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_14' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_14' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_14' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_14' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_14' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsArrayTest") == 0 || strcmp(*it, "UsdsArrayTest::test_14") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_14' ignored\n";
		}
		else
		{
			try
			{
				UsdsArrayTest::test_14();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_14' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_14' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_14' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_14' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_14' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsArrayTest") == 0 || strcmp(execute_only, "UsdsArrayTest::test_15") == 0)
		{
			try
			{
				UsdsArrayTest::test_15();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_15' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_15' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_15' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_15' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_15' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_15' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsArrayTest") == 0 || strcmp(*it, "UsdsArrayTest::test_15") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_15' ignored\n";
		}
		else
		{
			try
			{
				UsdsArrayTest::test_15();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_15' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_15' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_15' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_15' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_15' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsArrayTest") == 0 || strcmp(execute_only, "UsdsArrayTest::test_16") == 0)
		{
			try
			{
				UsdsArrayTest::test_16();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_16' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_16' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_16' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_16' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_16' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_16' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsArrayTest") == 0 || strcmp(*it, "UsdsArrayTest::test_16") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_16' ignored\n";
		}
		else
		{
			try
			{
				UsdsArrayTest::test_16();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_16' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_16' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_16' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_16' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_16' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsArrayTest") == 0 || strcmp(execute_only, "UsdsArrayTest::test_17") == 0)
		{
			try
			{
				UsdsArrayTest::test_17();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_17' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_17' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_17' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_17' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_17' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_17' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsArrayTest") == 0 || strcmp(*it, "UsdsArrayTest::test_17") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_17' ignored\n";
		}
		else
		{
			try
			{
				UsdsArrayTest::test_17();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_17' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_17' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_17' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_17' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_17' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsArrayTest") == 0 || strcmp(execute_only, "UsdsArrayTest::test_18") == 0)
		{
			try
			{
				UsdsArrayTest::test_18();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_18' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_18' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_18' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_18' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_18' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_18' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsArrayTest") == 0 || strcmp(*it, "UsdsArrayTest::test_18") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_18' ignored\n";
		}
		else
		{
			try
			{
				UsdsArrayTest::test_18();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_18' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_18' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_18' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_18' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_18' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsArrayTest") == 0 || strcmp(execute_only, "UsdsArrayTest::test_19") == 0)
		{
			try
			{
				UsdsArrayTest::test_19();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_19' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_19' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_19' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_19' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_19' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_19' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsArrayTest") == 0 || strcmp(*it, "UsdsArrayTest::test_19") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_19' ignored\n";
		}
		else
		{
			try
			{
				UsdsArrayTest::test_19();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_19' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_19' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_19' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_19' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsArrayTest::test_19' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "DictionaryTagLinkTest") == 0 || strcmp(execute_only, "DictionaryTagLinkTest::test_1") == 0)
		{
			try
			{
				DictionaryTagLinkTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionaryTagLinkTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTagLinkTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTagLinkTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTagLinkTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTagLinkTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionaryTagLinkTest::test_1' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "DictionaryTagLinkTest") == 0 || strcmp(*it, "DictionaryTagLinkTest::test_1") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionaryTagLinkTest::test_1' ignored\n";
		}
		else
		{
			try
			{
				DictionaryTagLinkTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionaryTagLinkTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTagLinkTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTagLinkTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTagLinkTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTagLinkTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "DictionaryTagLinkTest") == 0 || strcmp(execute_only, "DictionaryTagLinkTest::test_2") == 0)
		{
			try
			{
				DictionaryTagLinkTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionaryTagLinkTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTagLinkTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTagLinkTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTagLinkTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTagLinkTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionaryTagLinkTest::test_2' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "DictionaryTagLinkTest") == 0 || strcmp(*it, "DictionaryTagLinkTest::test_2") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionaryTagLinkTest::test_2' ignored\n";
		}
		else
		{
			try
			{
				DictionaryTagLinkTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionaryTagLinkTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTagLinkTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTagLinkTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTagLinkTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTagLinkTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "DictionaryTagLinkTest") == 0 || strcmp(execute_only, "DictionaryTagLinkTest::test_3") == 0)
		{
			try
			{
				DictionaryTagLinkTest::test_3();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionaryTagLinkTest::test_3' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTagLinkTest::test_3' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTagLinkTest::test_3' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTagLinkTest::test_3' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTagLinkTest::test_3' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionaryTagLinkTest::test_3' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "DictionaryTagLinkTest") == 0 || strcmp(*it, "DictionaryTagLinkTest::test_3") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionaryTagLinkTest::test_3' ignored\n";
		}
		else
		{
			try
			{
				DictionaryTagLinkTest::test_3();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionaryTagLinkTest::test_3' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTagLinkTest::test_3' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTagLinkTest::test_3' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTagLinkTest::test_3' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTagLinkTest::test_3' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsTypeConversionTest") == 0 || strcmp(execute_only, "UsdsTypeConversionTest::test_1") == 0)
		{
			try
			{
				UsdsTypeConversionTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_1' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsTypeConversionTest") == 0 || strcmp(*it, "UsdsTypeConversionTest::test_1") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_1' ignored\n";
		}
		else
		{
			try
			{
				UsdsTypeConversionTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsTypeConversionTest") == 0 || strcmp(execute_only, "UsdsTypeConversionTest::test_2") == 0)
		{
			try
			{
				UsdsTypeConversionTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_2' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsTypeConversionTest") == 0 || strcmp(*it, "UsdsTypeConversionTest::test_2") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_2' ignored\n";
		}
		else
		{
			try
			{
				UsdsTypeConversionTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsTypeConversionTest") == 0 || strcmp(execute_only, "UsdsTypeConversionTest::test_3") == 0)
		{
			try
			{
				UsdsTypeConversionTest::test_3();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_3' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_3' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_3' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_3' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_3' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_3' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsTypeConversionTest") == 0 || strcmp(*it, "UsdsTypeConversionTest::test_3") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_3' ignored\n";
		}
		else
		{
			try
			{
				UsdsTypeConversionTest::test_3();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_3' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_3' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_3' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_3' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_3' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsTypeConversionTest") == 0 || strcmp(execute_only, "UsdsTypeConversionTest::test_4") == 0)
		{
			try
			{
				UsdsTypeConversionTest::test_4();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_4' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_4' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_4' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_4' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_4' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_4' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsTypeConversionTest") == 0 || strcmp(*it, "UsdsTypeConversionTest::test_4") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_4' ignored\n";
		}
		else
		{
			try
			{
				UsdsTypeConversionTest::test_4();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_4' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_4' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_4' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_4' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_4' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsTypeConversionTest") == 0 || strcmp(execute_only, "UsdsTypeConversionTest::test_5") == 0)
		{
			try
			{
				UsdsTypeConversionTest::test_5();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_5' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_5' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_5' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_5' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_5' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_5' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsTypeConversionTest") == 0 || strcmp(*it, "UsdsTypeConversionTest::test_5") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_5' ignored\n";
		}
		else
		{
			try
			{
				UsdsTypeConversionTest::test_5();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_5' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_5' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_5' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_5' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_5' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsTypeConversionTest") == 0 || strcmp(execute_only, "UsdsTypeConversionTest::test_6") == 0)
		{
			try
			{
				UsdsTypeConversionTest::test_6();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_6' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_6' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_6' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_6' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_6' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_6' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsTypeConversionTest") == 0 || strcmp(*it, "UsdsTypeConversionTest::test_6") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_6' ignored\n";
		}
		else
		{
			try
			{
				UsdsTypeConversionTest::test_6();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_6' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_6' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_6' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_6' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_6' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsTypeConversionTest") == 0 || strcmp(execute_only, "UsdsTypeConversionTest::test_7") == 0)
		{
			try
			{
				UsdsTypeConversionTest::test_7();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_7' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_7' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_7' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_7' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_7' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_7' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsTypeConversionTest") == 0 || strcmp(*it, "UsdsTypeConversionTest::test_7") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_7' ignored\n";
		}
		else
		{
			try
			{
				UsdsTypeConversionTest::test_7();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_7' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_7' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_7' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_7' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_7' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsTypeConversionTest") == 0 || strcmp(execute_only, "UsdsTypeConversionTest::test_8") == 0)
		{
			try
			{
				UsdsTypeConversionTest::test_8();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_8' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_8' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_8' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_8' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_8' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_8' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsTypeConversionTest") == 0 || strcmp(*it, "UsdsTypeConversionTest::test_8") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_8' ignored\n";
		}
		else
		{
			try
			{
				UsdsTypeConversionTest::test_8();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_8' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_8' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_8' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_8' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_8' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsTypeConversionTest") == 0 || strcmp(execute_only, "UsdsTypeConversionTest::test_9") == 0)
		{
			try
			{
				UsdsTypeConversionTest::test_9();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_9' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_9' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_9' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_9' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_9' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_9' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsTypeConversionTest") == 0 || strcmp(*it, "UsdsTypeConversionTest::test_9") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_9' ignored\n";
		}
		else
		{
			try
			{
				UsdsTypeConversionTest::test_9();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_9' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_9' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_9' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_9' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_9' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsTypeConversionTest") == 0 || strcmp(execute_only, "UsdsTypeConversionTest::test_10") == 0)
		{
			try
			{
				UsdsTypeConversionTest::test_10();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_10' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_10' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_10' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_10' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_10' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_10' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsTypeConversionTest") == 0 || strcmp(*it, "UsdsTypeConversionTest::test_10") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_10' ignored\n";
		}
		else
		{
			try
			{
				UsdsTypeConversionTest::test_10();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_10' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_10' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_10' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_10' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_10' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsTypeConversionTest") == 0 || strcmp(execute_only, "UsdsTypeConversionTest::test_11") == 0)
		{
			try
			{
				UsdsTypeConversionTest::test_11();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_11' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_11' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_11' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_11' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_11' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_11' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsTypeConversionTest") == 0 || strcmp(*it, "UsdsTypeConversionTest::test_11") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_11' ignored\n";
		}
		else
		{
			try
			{
				UsdsTypeConversionTest::test_11();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_11' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_11' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_11' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_11' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_11' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsTypeConversionTest") == 0 || strcmp(execute_only, "UsdsTypeConversionTest::test_12") == 0)
		{
			try
			{
				UsdsTypeConversionTest::test_12();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_12' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_12' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_12' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_12' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_12' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_12' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsTypeConversionTest") == 0 || strcmp(*it, "UsdsTypeConversionTest::test_12") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_12' ignored\n";
		}
		else
		{
			try
			{
				UsdsTypeConversionTest::test_12();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_12' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_12' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_12' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_12' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_12' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsTypeConversionTest") == 0 || strcmp(execute_only, "UsdsTypeConversionTest::test_13") == 0)
		{
			try
			{
				UsdsTypeConversionTest::test_13();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_13' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_13' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_13' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_13' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_13' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_13' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsTypeConversionTest") == 0 || strcmp(*it, "UsdsTypeConversionTest::test_13") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_13' ignored\n";
		}
		else
		{
			try
			{
				UsdsTypeConversionTest::test_13();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_13' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_13' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_13' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_13' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_13' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsTypeConversionTest") == 0 || strcmp(execute_only, "UsdsTypeConversionTest::test_14") == 0)
		{
			try
			{
				UsdsTypeConversionTest::test_14();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_14' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_14' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_14' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_14' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_14' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_14' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsTypeConversionTest") == 0 || strcmp(*it, "UsdsTypeConversionTest::test_14") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_14' ignored\n";
		}
		else
		{
			try
			{
				UsdsTypeConversionTest::test_14();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_14' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_14' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_14' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_14' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_14' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsTypeConversionTest") == 0 || strcmp(execute_only, "UsdsTypeConversionTest::test_15") == 0)
		{
			try
			{
				UsdsTypeConversionTest::test_15();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_15' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_15' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_15' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_15' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_15' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_15' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsTypeConversionTest") == 0 || strcmp(*it, "UsdsTypeConversionTest::test_15") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_15' ignored\n";
		}
		else
		{
			try
			{
				UsdsTypeConversionTest::test_15();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_15' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_15' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_15' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_15' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_15' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsTypeConversionTest") == 0 || strcmp(execute_only, "UsdsTypeConversionTest::test_16") == 0)
		{
			try
			{
				UsdsTypeConversionTest::test_16();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_16' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_16' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_16' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_16' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_16' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_16' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsTypeConversionTest") == 0 || strcmp(*it, "UsdsTypeConversionTest::test_16") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_16' ignored\n";
		}
		else
		{
			try
			{
				UsdsTypeConversionTest::test_16();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_16' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_16' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_16' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_16' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_16' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsTypeConversionTest") == 0 || strcmp(execute_only, "UsdsTypeConversionTest::test_17") == 0)
		{
			try
			{
				UsdsTypeConversionTest::test_17();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_17' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_17' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_17' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_17' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_17' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_17' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsTypeConversionTest") == 0 || strcmp(*it, "UsdsTypeConversionTest::test_17") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_17' ignored\n";
		}
		else
		{
			try
			{
				UsdsTypeConversionTest::test_17();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_17' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_17' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_17' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_17' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_17' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsTypeConversionTest") == 0 || strcmp(execute_only, "UsdsTypeConversionTest::test_18") == 0)
		{
			try
			{
				UsdsTypeConversionTest::test_18();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_18' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_18' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_18' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_18' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_18' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_18' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsTypeConversionTest") == 0 || strcmp(*it, "UsdsTypeConversionTest::test_18") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_18' ignored\n";
		}
		else
		{
			try
			{
				UsdsTypeConversionTest::test_18();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_18' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_18' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_18' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_18' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_18' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsTypeConversionTest") == 0 || strcmp(execute_only, "UsdsTypeConversionTest::test_19") == 0)
		{
			try
			{
				UsdsTypeConversionTest::test_19();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_19' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_19' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_19' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_19' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_19' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_19' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsTypeConversionTest") == 0 || strcmp(*it, "UsdsTypeConversionTest::test_19") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_19' ignored\n";
		}
		else
		{
			try
			{
				UsdsTypeConversionTest::test_19();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_19' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_19' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_19' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_19' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_19' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsTypeConversionTest") == 0 || strcmp(execute_only, "UsdsTypeConversionTest::test_20") == 0)
		{
			try
			{
				UsdsTypeConversionTest::test_20();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_20' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_20' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_20' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_20' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_20' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_20' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsTypeConversionTest") == 0 || strcmp(*it, "UsdsTypeConversionTest::test_20") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_20' ignored\n";
		}
		else
		{
			try
			{
				UsdsTypeConversionTest::test_20();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_20' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_20' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_20' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_20' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_20' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsTypeConversionTest") == 0 || strcmp(execute_only, "UsdsTypeConversionTest::test_21") == 0)
		{
			try
			{
				UsdsTypeConversionTest::test_21();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_21' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_21' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_21' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_21' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_21' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_21' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsTypeConversionTest") == 0 || strcmp(*it, "UsdsTypeConversionTest::test_21") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_21' ignored\n";
		}
		else
		{
			try
			{
				UsdsTypeConversionTest::test_21();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_21' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_21' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_21' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_21' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_21' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsTypeConversionTest") == 0 || strcmp(execute_only, "UsdsTypeConversionTest::test_22") == 0)
		{
			try
			{
				UsdsTypeConversionTest::test_22();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_22' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_22' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_22' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_22' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_22' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_22' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsTypeConversionTest") == 0 || strcmp(*it, "UsdsTypeConversionTest::test_22") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_22' ignored\n";
		}
		else
		{
			try
			{
				UsdsTypeConversionTest::test_22();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_22' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_22' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_22' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_22' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_22' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsTypeConversionTest") == 0 || strcmp(execute_only, "UsdsTypeConversionTest::test_23") == 0)
		{
			try
			{
				UsdsTypeConversionTest::test_23();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_23' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_23' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_23' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_23' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_23' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_23' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsTypeConversionTest") == 0 || strcmp(*it, "UsdsTypeConversionTest::test_23") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_23' ignored\n";
		}
		else
		{
			try
			{
				UsdsTypeConversionTest::test_23();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_23' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_23' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_23' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_23' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_23' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsTypeConversionTest") == 0 || strcmp(execute_only, "UsdsTypeConversionTest::test_24") == 0)
		{
			try
			{
				UsdsTypeConversionTest::test_24();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_24' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_24' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_24' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_24' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_24' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_24' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsTypeConversionTest") == 0 || strcmp(*it, "UsdsTypeConversionTest::test_24") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_24' ignored\n";
		}
		else
		{
			try
			{
				UsdsTypeConversionTest::test_24();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_24' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_24' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_24' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_24' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_24' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsTypeConversionTest") == 0 || strcmp(execute_only, "UsdsTypeConversionTest::test_25") == 0)
		{
			try
			{
				UsdsTypeConversionTest::test_25();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_25' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_25' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_25' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_25' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_25' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_25' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsTypeConversionTest") == 0 || strcmp(*it, "UsdsTypeConversionTest::test_25") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_25' ignored\n";
		}
		else
		{
			try
			{
				UsdsTypeConversionTest::test_25();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_25' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_25' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_25' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_25' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_25' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsTypeConversionTest") == 0 || strcmp(execute_only, "UsdsTypeConversionTest::test_26") == 0)
		{
			try
			{
				UsdsTypeConversionTest::test_26();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_26' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_26' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_26' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_26' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_26' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_26' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsTypeConversionTest") == 0 || strcmp(*it, "UsdsTypeConversionTest::test_26") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_26' ignored\n";
		}
		else
		{
			try
			{
				UsdsTypeConversionTest::test_26();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_26' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_26' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_26' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_26' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsTypeConversionTest::test_26' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "DictionaryStructTest") == 0 || strcmp(execute_only, "DictionaryStructTest::test_1") == 0)
		{
			try
			{
				DictionaryStructTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_1' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "DictionaryStructTest") == 0 || strcmp(*it, "DictionaryStructTest::test_1") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_1' ignored\n";
		}
		else
		{
			try
			{
				DictionaryStructTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "DictionaryStructTest") == 0 || strcmp(execute_only, "DictionaryStructTest::test_2") == 0)
		{
			try
			{
				DictionaryStructTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_2' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "DictionaryStructTest") == 0 || strcmp(*it, "DictionaryStructTest::test_2") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_2' ignored\n";
		}
		else
		{
			try
			{
				DictionaryStructTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "DictionaryStructTest") == 0 || strcmp(execute_only, "DictionaryStructTest::test_3") == 0)
		{
			try
			{
				DictionaryStructTest::test_3();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_3' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_3' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_3' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_3' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_3' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_3' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "DictionaryStructTest") == 0 || strcmp(*it, "DictionaryStructTest::test_3") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_3' ignored\n";
		}
		else
		{
			try
			{
				DictionaryStructTest::test_3();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_3' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_3' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_3' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_3' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_3' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "DictionaryStructTest") == 0 || strcmp(execute_only, "DictionaryStructTest::test_4") == 0)
		{
			try
			{
				DictionaryStructTest::test_4();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_4' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_4' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_4' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_4' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_4' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_4' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "DictionaryStructTest") == 0 || strcmp(*it, "DictionaryStructTest::test_4") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_4' ignored\n";
		}
		else
		{
			try
			{
				DictionaryStructTest::test_4();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_4' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_4' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_4' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_4' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionaryStructTest::test_4' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsUShortTest") == 0 || strcmp(execute_only, "UsdsUShortTest::test_1") == 0)
		{
			try
			{
				UsdsUShortTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsUShortTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsUShortTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsUShortTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsUShortTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsUShortTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsUShortTest::test_1' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsUShortTest") == 0 || strcmp(*it, "UsdsUShortTest::test_1") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsUShortTest::test_1' ignored\n";
		}
		else
		{
			try
			{
				UsdsUShortTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsUShortTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsUShortTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsUShortTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsUShortTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsUShortTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsUShortTest") == 0 || strcmp(execute_only, "UsdsUShortTest::test_2") == 0)
		{
			try
			{
				UsdsUShortTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsUShortTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsUShortTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsUShortTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsUShortTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsUShortTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsUShortTest::test_2' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsUShortTest") == 0 || strcmp(*it, "UsdsUShortTest::test_2") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsUShortTest::test_2' ignored\n";
		}
		else
		{
			try
			{
				UsdsUShortTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsUShortTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsUShortTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsUShortTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsUShortTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsUShortTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsUShortTest") == 0 || strcmp(execute_only, "UsdsUShortTest::test_3") == 0)
		{
			try
			{
				UsdsUShortTest::test_3();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsUShortTest::test_3' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsUShortTest::test_3' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsUShortTest::test_3' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsUShortTest::test_3' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsUShortTest::test_3' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsUShortTest::test_3' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsUShortTest") == 0 || strcmp(*it, "UsdsUShortTest::test_3") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsUShortTest::test_3' ignored\n";
		}
		else
		{
			try
			{
				UsdsUShortTest::test_3();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsUShortTest::test_3' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsUShortTest::test_3' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsUShortTest::test_3' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsUShortTest::test_3' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsUShortTest::test_3' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsUVarintTest") == 0 || strcmp(execute_only, "UsdsUVarintTest::test_1") == 0)
		{
			try
			{
				UsdsUVarintTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsUVarintTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsUVarintTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsUVarintTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsUVarintTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsUVarintTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsUVarintTest::test_1' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsUVarintTest") == 0 || strcmp(*it, "UsdsUVarintTest::test_1") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsUVarintTest::test_1' ignored\n";
		}
		else
		{
			try
			{
				UsdsUVarintTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsUVarintTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsUVarintTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsUVarintTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsUVarintTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsUVarintTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsUVarintTest") == 0 || strcmp(execute_only, "UsdsUVarintTest::test_2") == 0)
		{
			try
			{
				UsdsUVarintTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsUVarintTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsUVarintTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsUVarintTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsUVarintTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsUVarintTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsUVarintTest::test_2' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsUVarintTest") == 0 || strcmp(*it, "UsdsUVarintTest::test_2") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsUVarintTest::test_2' ignored\n";
		}
		else
		{
			try
			{
				UsdsUVarintTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsUVarintTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsUVarintTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsUVarintTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsUVarintTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsUVarintTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "BinaryInputTest") == 0 || strcmp(execute_only, "BinaryInputTest::test_1") == 0)
		{
			try
			{
				BinaryInputTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryInputTest::test_1' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "BinaryInputTest") == 0 || strcmp(*it, "BinaryInputTest::test_1") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryInputTest::test_1' ignored\n";
		}
		else
		{
			try
			{
				BinaryInputTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "BinaryInputTest") == 0 || strcmp(execute_only, "BinaryInputTest::test_2") == 0)
		{
			try
			{
				BinaryInputTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryInputTest::test_2' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "BinaryInputTest") == 0 || strcmp(*it, "BinaryInputTest::test_2") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryInputTest::test_2' ignored\n";
		}
		else
		{
			try
			{
				BinaryInputTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "BinaryInputTest") == 0 || strcmp(execute_only, "BinaryInputTest::test_3") == 0)
		{
			try
			{
				BinaryInputTest::test_3();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_3' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_3' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_3' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_3' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_3' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryInputTest::test_3' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "BinaryInputTest") == 0 || strcmp(*it, "BinaryInputTest::test_3") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryInputTest::test_3' ignored\n";
		}
		else
		{
			try
			{
				BinaryInputTest::test_3();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_3' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_3' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_3' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_3' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_3' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "BinaryInputTest") == 0 || strcmp(execute_only, "BinaryInputTest::test_4") == 0)
		{
			try
			{
				BinaryInputTest::test_4();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_4' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_4' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_4' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_4' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_4' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryInputTest::test_4' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "BinaryInputTest") == 0 || strcmp(*it, "BinaryInputTest::test_4") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryInputTest::test_4' ignored\n";
		}
		else
		{
			try
			{
				BinaryInputTest::test_4();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_4' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_4' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_4' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_4' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_4' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "BinaryInputTest") == 0 || strcmp(execute_only, "BinaryInputTest::test_5") == 0)
		{
			try
			{
				BinaryInputTest::test_5();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_5' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_5' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_5' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_5' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_5' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryInputTest::test_5' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "BinaryInputTest") == 0 || strcmp(*it, "BinaryInputTest::test_5") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryInputTest::test_5' ignored\n";
		}
		else
		{
			try
			{
				BinaryInputTest::test_5();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_5' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_5' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_5' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_5' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_5' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "BinaryInputTest") == 0 || strcmp(execute_only, "BinaryInputTest::test_6") == 0)
		{
			try
			{
				BinaryInputTest::test_6();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_6' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_6' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_6' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_6' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_6' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryInputTest::test_6' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "BinaryInputTest") == 0 || strcmp(*it, "BinaryInputTest::test_6") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryInputTest::test_6' ignored\n";
		}
		else
		{
			try
			{
				BinaryInputTest::test_6();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_6' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_6' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_6' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_6' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_6' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "BinaryInputTest") == 0 || strcmp(execute_only, "BinaryInputTest::test_7") == 0)
		{
			try
			{
				BinaryInputTest::test_7();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_7' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_7' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_7' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_7' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_7' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryInputTest::test_7' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "BinaryInputTest") == 0 || strcmp(*it, "BinaryInputTest::test_7") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryInputTest::test_7' ignored\n";
		}
		else
		{
			try
			{
				BinaryInputTest::test_7();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_7' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_7' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_7' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_7' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_7' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "BinaryInputTest") == 0 || strcmp(execute_only, "BinaryInputTest::test_8") == 0)
		{
			try
			{
				BinaryInputTest::test_8();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_8' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_8' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_8' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_8' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_8' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryInputTest::test_8' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "BinaryInputTest") == 0 || strcmp(*it, "BinaryInputTest::test_8") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryInputTest::test_8' ignored\n";
		}
		else
		{
			try
			{
				BinaryInputTest::test_8();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_8' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_8' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_8' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_8' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_8' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "BinaryInputTest") == 0 || strcmp(execute_only, "BinaryInputTest::test_9") == 0)
		{
			try
			{
				BinaryInputTest::test_9();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_9' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_9' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_9' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_9' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_9' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryInputTest::test_9' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "BinaryInputTest") == 0 || strcmp(*it, "BinaryInputTest::test_9") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryInputTest::test_9' ignored\n";
		}
		else
		{
			try
			{
				BinaryInputTest::test_9();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_9' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_9' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_9' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_9' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_9' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "BinaryInputTest") == 0 || strcmp(execute_only, "BinaryInputTest::test_10") == 0)
		{
			try
			{
				BinaryInputTest::test_10();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_10' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_10' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_10' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_10' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_10' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryInputTest::test_10' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "BinaryInputTest") == 0 || strcmp(*it, "BinaryInputTest::test_10") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryInputTest::test_10' ignored\n";
		}
		else
		{
			try
			{
				BinaryInputTest::test_10();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_10' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_10' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_10' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_10' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_10' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "BinaryInputTest") == 0 || strcmp(execute_only, "BinaryInputTest::test_11") == 0)
		{
			try
			{
				BinaryInputTest::test_11();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_11' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_11' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_11' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_11' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_11' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryInputTest::test_11' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "BinaryInputTest") == 0 || strcmp(*it, "BinaryInputTest::test_11") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryInputTest::test_11' ignored\n";
		}
		else
		{
			try
			{
				BinaryInputTest::test_11();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_11' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_11' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_11' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_11' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_11' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "BinaryInputTest") == 0 || strcmp(execute_only, "BinaryInputTest::test_12") == 0)
		{
			try
			{
				BinaryInputTest::test_12();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_12' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_12' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_12' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_12' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_12' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryInputTest::test_12' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "BinaryInputTest") == 0 || strcmp(*it, "BinaryInputTest::test_12") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryInputTest::test_12' ignored\n";
		}
		else
		{
			try
			{
				BinaryInputTest::test_12();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_12' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_12' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_12' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_12' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_12' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "BinaryInputTest") == 0 || strcmp(execute_only, "BinaryInputTest::test_13") == 0)
		{
			try
			{
				BinaryInputTest::test_13();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_13' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_13' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_13' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_13' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_13' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryInputTest::test_13' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "BinaryInputTest") == 0 || strcmp(*it, "BinaryInputTest::test_13") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryInputTest::test_13' ignored\n";
		}
		else
		{
			try
			{
				BinaryInputTest::test_13();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_13' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_13' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_13' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_13' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_13' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "BinaryInputTest") == 0 || strcmp(execute_only, "BinaryInputTest::test_14") == 0)
		{
			try
			{
				BinaryInputTest::test_14();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_14' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_14' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_14' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_14' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_14' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryInputTest::test_14' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "BinaryInputTest") == 0 || strcmp(*it, "BinaryInputTest::test_14") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryInputTest::test_14' ignored\n";
		}
		else
		{
			try
			{
				BinaryInputTest::test_14();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_14' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_14' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_14' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_14' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_14' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "BinaryInputTest") == 0 || strcmp(execute_only, "BinaryInputTest::test_15") == 0)
		{
			try
			{
				BinaryInputTest::test_15();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_15' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_15' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_15' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_15' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_15' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryInputTest::test_15' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "BinaryInputTest") == 0 || strcmp(*it, "BinaryInputTest::test_15") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryInputTest::test_15' ignored\n";
		}
		else
		{
			try
			{
				BinaryInputTest::test_15();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_15' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_15' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_15' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_15' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_15' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "BinaryInputTest") == 0 || strcmp(execute_only, "BinaryInputTest::test_16") == 0)
		{
			try
			{
				BinaryInputTest::test_16();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_16' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_16' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_16' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_16' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_16' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryInputTest::test_16' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "BinaryInputTest") == 0 || strcmp(*it, "BinaryInputTest::test_16") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryInputTest::test_16' ignored\n";
		}
		else
		{
			try
			{
				BinaryInputTest::test_16();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_16' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_16' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_16' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_16' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_16' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "BinaryInputTest") == 0 || strcmp(execute_only, "BinaryInputTest::test_17") == 0)
		{
			try
			{
				BinaryInputTest::test_17();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_17' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_17' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_17' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_17' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_17' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryInputTest::test_17' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "BinaryInputTest") == 0 || strcmp(*it, "BinaryInputTest::test_17") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryInputTest::test_17' ignored\n";
		}
		else
		{
			try
			{
				BinaryInputTest::test_17();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_17' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_17' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_17' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_17' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_17' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "BinaryInputTest") == 0 || strcmp(execute_only, "BinaryInputTest::test_18") == 0)
		{
			try
			{
				BinaryInputTest::test_18();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_18' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_18' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_18' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_18' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_18' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryInputTest::test_18' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "BinaryInputTest") == 0 || strcmp(*it, "BinaryInputTest::test_18") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryInputTest::test_18' ignored\n";
		}
		else
		{
			try
			{
				BinaryInputTest::test_18();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_18' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_18' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_18' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_18' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_18' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "BinaryInputTest") == 0 || strcmp(execute_only, "BinaryInputTest::test_19") == 0)
		{
			try
			{
				BinaryInputTest::test_19();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_19' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_19' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_19' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_19' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_19' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryInputTest::test_19' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "BinaryInputTest") == 0 || strcmp(*it, "BinaryInputTest::test_19") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'BinaryInputTest::test_19' ignored\n";
		}
		else
		{
			try
			{
				BinaryInputTest::test_19();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_19' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_19' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_19' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_19' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'BinaryInputTest::test_19' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsStringTest") == 0 || strcmp(execute_only, "UsdsStringTest::test_1") == 0)
		{
			try
			{
				UsdsStringTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsStringTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsStringTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsStringTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsStringTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsStringTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsStringTest::test_1' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsStringTest") == 0 || strcmp(*it, "UsdsStringTest::test_1") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsStringTest::test_1' ignored\n";
		}
		else
		{
			try
			{
				UsdsStringTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsStringTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsStringTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsStringTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsStringTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsStringTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsBooleanTest") == 0 || strcmp(execute_only, "UsdsBooleanTest::test_1") == 0)
		{
			try
			{
				UsdsBooleanTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsBooleanTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsBooleanTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsBooleanTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsBooleanTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsBooleanTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsBooleanTest::test_1' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsBooleanTest") == 0 || strcmp(*it, "UsdsBooleanTest::test_1") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsBooleanTest::test_1' ignored\n";
		}
		else
		{
			try
			{
				UsdsBooleanTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsBooleanTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsBooleanTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsBooleanTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsBooleanTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsBooleanTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsBooleanTest") == 0 || strcmp(execute_only, "UsdsBooleanTest::test_2") == 0)
		{
			try
			{
				UsdsBooleanTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsBooleanTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsBooleanTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsBooleanTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsBooleanTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsBooleanTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsBooleanTest::test_2' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsBooleanTest") == 0 || strcmp(*it, "UsdsBooleanTest::test_2") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsBooleanTest::test_2' ignored\n";
		}
		else
		{
			try
			{
				UsdsBooleanTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsBooleanTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsBooleanTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsBooleanTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsBooleanTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsBooleanTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "ErrorTest") == 0 || strcmp(execute_only, "ErrorTest::test_1") == 0)
		{
			try
			{
				ErrorTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'ErrorTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'ErrorTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'ErrorTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'ErrorTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'ErrorTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'ErrorTest::test_1' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "ErrorTest") == 0 || strcmp(*it, "ErrorTest::test_1") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'ErrorTest::test_1' ignored\n";
		}
		else
		{
			try
			{
				ErrorTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'ErrorTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'ErrorTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'ErrorTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'ErrorTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'ErrorTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "ErrorTest") == 0 || strcmp(execute_only, "ErrorTest::test_2") == 0)
		{
			try
			{
				ErrorTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'ErrorTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'ErrorTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'ErrorTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'ErrorTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'ErrorTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'ErrorTest::test_2' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "ErrorTest") == 0 || strcmp(*it, "ErrorTest::test_2") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'ErrorTest::test_2' ignored\n";
		}
		else
		{
			try
			{
				ErrorTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'ErrorTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'ErrorTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'ErrorTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'ErrorTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'ErrorTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "ErrorTest") == 0 || strcmp(execute_only, "ErrorTest::test_3") == 0)
		{
			try
			{
				ErrorTest::test_3();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'ErrorTest::test_3' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'ErrorTest::test_3' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'ErrorTest::test_3' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'ErrorTest::test_3' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'ErrorTest::test_3' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'ErrorTest::test_3' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "ErrorTest") == 0 || strcmp(*it, "ErrorTest::test_3") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'ErrorTest::test_3' ignored\n";
		}
		else
		{
			try
			{
				ErrorTest::test_3();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'ErrorTest::test_3' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'ErrorTest::test_3' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'ErrorTest::test_3' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'ErrorTest::test_3' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'ErrorTest::test_3' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "ErrorTest") == 0 || strcmp(execute_only, "ErrorTest::test_4") == 0)
		{
			try
			{
				ErrorTest::test_4();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'ErrorTest::test_4' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'ErrorTest::test_4' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'ErrorTest::test_4' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'ErrorTest::test_4' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'ErrorTest::test_4' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'ErrorTest::test_4' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "ErrorTest") == 0 || strcmp(*it, "ErrorTest::test_4") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'ErrorTest::test_4' ignored\n";
		}
		else
		{
			try
			{
				ErrorTest::test_4();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'ErrorTest::test_4' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'ErrorTest::test_4' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'ErrorTest::test_4' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'ErrorTest::test_4' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'ErrorTest::test_4' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "ErrorTest") == 0 || strcmp(execute_only, "ErrorTest::test_5") == 0)
		{
			try
			{
				ErrorTest::test_5();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'ErrorTest::test_5' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'ErrorTest::test_5' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'ErrorTest::test_5' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'ErrorTest::test_5' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'ErrorTest::test_5' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'ErrorTest::test_5' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "ErrorTest") == 0 || strcmp(*it, "ErrorTest::test_5") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'ErrorTest::test_5' ignored\n";
		}
		else
		{
			try
			{
				ErrorTest::test_5();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'ErrorTest::test_5' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'ErrorTest::test_5' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'ErrorTest::test_5' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'ErrorTest::test_5' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'ErrorTest::test_5' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsULongTest") == 0 || strcmp(execute_only, "UsdsULongTest::test_1") == 0)
		{
			try
			{
				UsdsULongTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsULongTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsULongTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsULongTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsULongTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsULongTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsULongTest::test_1' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsULongTest") == 0 || strcmp(*it, "UsdsULongTest::test_1") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsULongTest::test_1' ignored\n";
		}
		else
		{
			try
			{
				UsdsULongTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsULongTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsULongTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsULongTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsULongTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsULongTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsULongTest") == 0 || strcmp(execute_only, "UsdsULongTest::test_2") == 0)
		{
			try
			{
				UsdsULongTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsULongTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsULongTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsULongTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsULongTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsULongTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsULongTest::test_2' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsULongTest") == 0 || strcmp(*it, "UsdsULongTest::test_2") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsULongTest::test_2' ignored\n";
		}
		else
		{
			try
			{
				UsdsULongTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsULongTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsULongTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsULongTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsULongTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsULongTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsULongTest") == 0 || strcmp(execute_only, "UsdsULongTest::test_3") == 0)
		{
			try
			{
				UsdsULongTest::test_3();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsULongTest::test_3' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsULongTest::test_3' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsULongTest::test_3' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsULongTest::test_3' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsULongTest::test_3' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsULongTest::test_3' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsULongTest") == 0 || strcmp(*it, "UsdsULongTest::test_3") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsULongTest::test_3' ignored\n";
		}
		else
		{
			try
			{
				UsdsULongTest::test_3();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsULongTest::test_3' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsULongTest::test_3' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsULongTest::test_3' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsULongTest::test_3' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsULongTest::test_3' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "DictionaryTest") == 0 || strcmp(execute_only, "DictionaryTest::test_1") == 0)
		{
			try
			{
				DictionaryTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionaryTest::test_1' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "DictionaryTest") == 0 || strcmp(*it, "DictionaryTest::test_1") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionaryTest::test_1' ignored\n";
		}
		else
		{
			try
			{
				DictionaryTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "DictionaryTest") == 0 || strcmp(execute_only, "DictionaryTest::test_2") == 0)
		{
			try
			{
				DictionaryTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionaryTest::test_2' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "DictionaryTest") == 0 || strcmp(*it, "DictionaryTest::test_2") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionaryTest::test_2' ignored\n";
		}
		else
		{
			try
			{
				DictionaryTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "DictionaryTest") == 0 || strcmp(execute_only, "DictionaryTest::test_3") == 0)
		{
			try
			{
				DictionaryTest::test_3();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_3' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_3' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_3' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_3' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_3' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionaryTest::test_3' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "DictionaryTest") == 0 || strcmp(*it, "DictionaryTest::test_3") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionaryTest::test_3' ignored\n";
		}
		else
		{
			try
			{
				DictionaryTest::test_3();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_3' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_3' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_3' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_3' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_3' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "DictionaryTest") == 0 || strcmp(execute_only, "DictionaryTest::test_4") == 0)
		{
			try
			{
				DictionaryTest::test_4();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_4' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_4' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_4' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_4' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_4' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionaryTest::test_4' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "DictionaryTest") == 0 || strcmp(*it, "DictionaryTest::test_4") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionaryTest::test_4' ignored\n";
		}
		else
		{
			try
			{
				DictionaryTest::test_4();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_4' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_4' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_4' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_4' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_4' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "DictionaryTest") == 0 || strcmp(execute_only, "DictionaryTest::test_5") == 0)
		{
			try
			{
				DictionaryTest::test_5();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_5' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_5' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_5' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_5' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_5' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionaryTest::test_5' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "DictionaryTest") == 0 || strcmp(*it, "DictionaryTest::test_5") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionaryTest::test_5' ignored\n";
		}
		else
		{
			try
			{
				DictionaryTest::test_5();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_5' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_5' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_5' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_5' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_5' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "DictionaryTest") == 0 || strcmp(execute_only, "DictionaryTest::test_6") == 0)
		{
			try
			{
				DictionaryTest::test_6();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_6' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_6' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_6' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_6' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_6' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionaryTest::test_6' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "DictionaryTest") == 0 || strcmp(*it, "DictionaryTest::test_6") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionaryTest::test_6' ignored\n";
		}
		else
		{
			try
			{
				DictionaryTest::test_6();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_6' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_6' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_6' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_6' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_6' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "DictionaryTest") == 0 || strcmp(execute_only, "DictionaryTest::test_7") == 0)
		{
			try
			{
				DictionaryTest::test_7();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_7' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_7' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_7' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_7' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_7' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionaryTest::test_7' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "DictionaryTest") == 0 || strcmp(*it, "DictionaryTest::test_7") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionaryTest::test_7' ignored\n";
		}
		else
		{
			try
			{
				DictionaryTest::test_7();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_7' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_7' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_7' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_7' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionaryTest::test_7' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "ObjectPoolTest") == 0 || strcmp(execute_only, "ObjectPoolTest::test_1") == 0)
		{
			try
			{
				ObjectPoolTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_1' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "ObjectPoolTest") == 0 || strcmp(*it, "ObjectPoolTest::test_1") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_1' ignored\n";
		}
		else
		{
			try
			{
				ObjectPoolTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "ObjectPoolTest") == 0 || strcmp(execute_only, "ObjectPoolTest::test_2") == 0)
		{
			try
			{
				ObjectPoolTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_2' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "ObjectPoolTest") == 0 || strcmp(*it, "ObjectPoolTest::test_2") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_2' ignored\n";
		}
		else
		{
			try
			{
				ObjectPoolTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "ObjectPoolTest") == 0 || strcmp(execute_only, "ObjectPoolTest::test_3") == 0)
		{
			try
			{
				ObjectPoolTest::test_3();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_3' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_3' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_3' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_3' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_3' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_3' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "ObjectPoolTest") == 0 || strcmp(*it, "ObjectPoolTest::test_3") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_3' ignored\n";
		}
		else
		{
			try
			{
				ObjectPoolTest::test_3();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_3' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_3' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_3' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_3' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_3' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "ObjectPoolTest") == 0 || strcmp(execute_only, "ObjectPoolTest::test_4") == 0)
		{
			try
			{
				ObjectPoolTest::test_4();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_4' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_4' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_4' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_4' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_4' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_4' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "ObjectPoolTest") == 0 || strcmp(*it, "ObjectPoolTest::test_4") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_4' ignored\n";
		}
		else
		{
			try
			{
				ObjectPoolTest::test_4();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_4' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_4' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_4' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_4' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_4' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "ObjectPoolTest") == 0 || strcmp(execute_only, "ObjectPoolTest::test_5") == 0)
		{
			try
			{
				ObjectPoolTest::test_5();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_5' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_5' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_5' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_5' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_5' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_5' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "ObjectPoolTest") == 0 || strcmp(*it, "ObjectPoolTest::test_5") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_5' ignored\n";
		}
		else
		{
			try
			{
				ObjectPoolTest::test_5();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_5' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_5' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_5' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_5' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_5' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "ObjectPoolTest") == 0 || strcmp(execute_only, "ObjectPoolTest::test_6") == 0)
		{
			try
			{
				ObjectPoolTest::test_6();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_6' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_6' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_6' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_6' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_6' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_6' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "ObjectPoolTest") == 0 || strcmp(*it, "ObjectPoolTest::test_6") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_6' ignored\n";
		}
		else
		{
			try
			{
				ObjectPoolTest::test_6();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_6' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_6' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_6' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_6' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_6' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "ObjectPoolTest") == 0 || strcmp(execute_only, "ObjectPoolTest::test_7") == 0)
		{
			try
			{
				ObjectPoolTest::test_7();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_7' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_7' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_7' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_7' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_7' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_7' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "ObjectPoolTest") == 0 || strcmp(*it, "ObjectPoolTest::test_7") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_7' ignored\n";
		}
		else
		{
			try
			{
				ObjectPoolTest::test_7();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_7' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_7' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_7' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_7' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_7' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "ObjectPoolTest") == 0 || strcmp(execute_only, "ObjectPoolTest::test_8") == 0)
		{
			try
			{
				ObjectPoolTest::test_8();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_8' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_8' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_8' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_8' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_8' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_8' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "ObjectPoolTest") == 0 || strcmp(*it, "ObjectPoolTest::test_8") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_8' ignored\n";
		}
		else
		{
			try
			{
				ObjectPoolTest::test_8();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_8' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_8' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_8' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_8' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_8' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "ObjectPoolTest") == 0 || strcmp(execute_only, "ObjectPoolTest::test_9") == 0)
		{
			try
			{
				ObjectPoolTest::test_9();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_9' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_9' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_9' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_9' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_9' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_9' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "ObjectPoolTest") == 0 || strcmp(*it, "ObjectPoolTest::test_9") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_9' ignored\n";
		}
		else
		{
			try
			{
				ObjectPoolTest::test_9();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_9' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_9' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_9' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_9' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_9' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "ObjectPoolTest") == 0 || strcmp(execute_only, "ObjectPoolTest::test_10") == 0)
		{
			try
			{
				ObjectPoolTest::test_10();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_10' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_10' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_10' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_10' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_10' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_10' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "ObjectPoolTest") == 0 || strcmp(*it, "ObjectPoolTest::test_10") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_10' ignored\n";
		}
		else
		{
			try
			{
				ObjectPoolTest::test_10();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_10' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_10' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_10' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_10' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_10' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "ObjectPoolTest") == 0 || strcmp(execute_only, "ObjectPoolTest::test_11") == 0)
		{
			try
			{
				ObjectPoolTest::test_11();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_11' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_11' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_11' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_11' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_11' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_11' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "ObjectPoolTest") == 0 || strcmp(*it, "ObjectPoolTest::test_11") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_11' ignored\n";
		}
		else
		{
			try
			{
				ObjectPoolTest::test_11();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_11' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_11' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_11' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_11' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_11' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "ObjectPoolTest") == 0 || strcmp(execute_only, "ObjectPoolTest::test_12") == 0)
		{
			try
			{
				ObjectPoolTest::test_12();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_12' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_12' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_12' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_12' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_12' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_12' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "ObjectPoolTest") == 0 || strcmp(*it, "ObjectPoolTest::test_12") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_12' ignored\n";
		}
		else
		{
			try
			{
				ObjectPoolTest::test_12();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_12' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_12' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_12' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_12' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'ObjectPoolTest::test_12' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsShortTest") == 0 || strcmp(execute_only, "UsdsShortTest::test_1") == 0)
		{
			try
			{
				UsdsShortTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsShortTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsShortTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsShortTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsShortTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsShortTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsShortTest::test_1' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsShortTest") == 0 || strcmp(*it, "UsdsShortTest::test_1") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsShortTest::test_1' ignored\n";
		}
		else
		{
			try
			{
				UsdsShortTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsShortTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsShortTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsShortTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsShortTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsShortTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsShortTest") == 0 || strcmp(execute_only, "UsdsShortTest::test_2") == 0)
		{
			try
			{
				UsdsShortTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsShortTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsShortTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsShortTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsShortTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsShortTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsShortTest::test_2' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsShortTest") == 0 || strcmp(*it, "UsdsShortTest::test_2") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsShortTest::test_2' ignored\n";
		}
		else
		{
			try
			{
				UsdsShortTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsShortTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsShortTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsShortTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsShortTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsShortTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsShortTest") == 0 || strcmp(execute_only, "UsdsShortTest::test_3") == 0)
		{
			try
			{
				UsdsShortTest::test_3();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsShortTest::test_3' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsShortTest::test_3' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsShortTest::test_3' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsShortTest::test_3' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsShortTest::test_3' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsShortTest::test_3' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsShortTest") == 0 || strcmp(*it, "UsdsShortTest::test_3") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsShortTest::test_3' ignored\n";
		}
		else
		{
			try
			{
				UsdsShortTest::test_3();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsShortTest::test_3' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsShortTest::test_3' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsShortTest::test_3' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsShortTest::test_3' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsShortTest::test_3' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsUByteTest") == 0 || strcmp(execute_only, "UsdsUByteTest::test_1") == 0)
		{
			try
			{
				UsdsUByteTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsUByteTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsUByteTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsUByteTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsUByteTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsUByteTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsUByteTest::test_1' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsUByteTest") == 0 || strcmp(*it, "UsdsUByteTest::test_1") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsUByteTest::test_1' ignored\n";
		}
		else
		{
			try
			{
				UsdsUByteTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsUByteTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsUByteTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsUByteTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsUByteTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsUByteTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsUByteTest") == 0 || strcmp(execute_only, "UsdsUByteTest::test_2") == 0)
		{
			try
			{
				UsdsUByteTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsUByteTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsUByteTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsUByteTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsUByteTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsUByteTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsUByteTest::test_2' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsUByteTest") == 0 || strcmp(*it, "UsdsUByteTest::test_2") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsUByteTest::test_2' ignored\n";
		}
		else
		{
			try
			{
				UsdsUByteTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsUByteTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsUByteTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsUByteTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsUByteTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsUByteTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsUIntTest") == 0 || strcmp(execute_only, "UsdsUIntTest::test_1") == 0)
		{
			try
			{
				UsdsUIntTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsUIntTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsUIntTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsUIntTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsUIntTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsUIntTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsUIntTest::test_1' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsUIntTest") == 0 || strcmp(*it, "UsdsUIntTest::test_1") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsUIntTest::test_1' ignored\n";
		}
		else
		{
			try
			{
				UsdsUIntTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsUIntTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsUIntTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsUIntTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsUIntTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsUIntTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsUIntTest") == 0 || strcmp(execute_only, "UsdsUIntTest::test_2") == 0)
		{
			try
			{
				UsdsUIntTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsUIntTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsUIntTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsUIntTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsUIntTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsUIntTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsUIntTest::test_2' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsUIntTest") == 0 || strcmp(*it, "UsdsUIntTest::test_2") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsUIntTest::test_2' ignored\n";
		}
		else
		{
			try
			{
				UsdsUIntTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsUIntTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsUIntTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsUIntTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsUIntTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsUIntTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsUIntTest") == 0 || strcmp(execute_only, "UsdsUIntTest::test_3") == 0)
		{
			try
			{
				UsdsUIntTest::test_3();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsUIntTest::test_3' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsUIntTest::test_3' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsUIntTest::test_3' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsUIntTest::test_3' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsUIntTest::test_3' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsUIntTest::test_3' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsUIntTest") == 0 || strcmp(*it, "UsdsUIntTest::test_3") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsUIntTest::test_3' ignored\n";
		}
		else
		{
			try
			{
				UsdsUIntTest::test_3();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsUIntTest::test_3' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsUIntTest::test_3' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsUIntTest::test_3' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsUIntTest::test_3' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsUIntTest::test_3' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "DictionaryArrayTest") == 0 || strcmp(execute_only, "DictionaryArrayTest::test_1") == 0)
		{
			try
			{
				DictionaryArrayTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionaryArrayTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionaryArrayTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionaryArrayTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionaryArrayTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionaryArrayTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionaryArrayTest::test_1' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "DictionaryArrayTest") == 0 || strcmp(*it, "DictionaryArrayTest::test_1") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionaryArrayTest::test_1' ignored\n";
		}
		else
		{
			try
			{
				DictionaryArrayTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionaryArrayTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionaryArrayTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionaryArrayTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionaryArrayTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionaryArrayTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "DictionaryArrayTest") == 0 || strcmp(execute_only, "DictionaryArrayTest::test_2") == 0)
		{
			try
			{
				DictionaryArrayTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionaryArrayTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionaryArrayTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionaryArrayTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionaryArrayTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionaryArrayTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionaryArrayTest::test_2' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "DictionaryArrayTest") == 0 || strcmp(*it, "DictionaryArrayTest::test_2") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionaryArrayTest::test_2' ignored\n";
		}
		else
		{
			try
			{
				DictionaryArrayTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionaryArrayTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionaryArrayTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionaryArrayTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionaryArrayTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionaryArrayTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsLongTest") == 0 || strcmp(execute_only, "UsdsLongTest::test_1") == 0)
		{
			try
			{
				UsdsLongTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsLongTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsLongTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsLongTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsLongTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsLongTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsLongTest::test_1' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsLongTest") == 0 || strcmp(*it, "UsdsLongTest::test_1") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsLongTest::test_1' ignored\n";
		}
		else
		{
			try
			{
				UsdsLongTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsLongTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsLongTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsLongTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsLongTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsLongTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsLongTest") == 0 || strcmp(execute_only, "UsdsLongTest::test_2") == 0)
		{
			try
			{
				UsdsLongTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsLongTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsLongTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsLongTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsLongTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsLongTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsLongTest::test_2' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsLongTest") == 0 || strcmp(*it, "UsdsLongTest::test_2") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsLongTest::test_2' ignored\n";
		}
		else
		{
			try
			{
				UsdsLongTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsLongTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsLongTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsLongTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsLongTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsLongTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsLongTest") == 0 || strcmp(execute_only, "UsdsLongTest::test_3") == 0)
		{
			try
			{
				UsdsLongTest::test_3();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsLongTest::test_3' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsLongTest::test_3' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsLongTest::test_3' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsLongTest::test_3' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsLongTest::test_3' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsLongTest::test_3' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsLongTest") == 0 || strcmp(*it, "UsdsLongTest::test_3") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsLongTest::test_3' ignored\n";
		}
		else
		{
			try
			{
				UsdsLongTest::test_3();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsLongTest::test_3' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsLongTest::test_3' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsLongTest::test_3' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsLongTest::test_3' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsLongTest::test_3' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "DictionarySimpleTest") == 0 || strcmp(execute_only, "DictionarySimpleTest::test_1") == 0)
		{
			try
			{
				DictionarySimpleTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_1' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "DictionarySimpleTest") == 0 || strcmp(*it, "DictionarySimpleTest::test_1") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_1' ignored\n";
		}
		else
		{
			try
			{
				DictionarySimpleTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "DictionarySimpleTest") == 0 || strcmp(execute_only, "DictionarySimpleTest::test_2") == 0)
		{
			try
			{
				DictionarySimpleTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_2' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "DictionarySimpleTest") == 0 || strcmp(*it, "DictionarySimpleTest::test_2") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_2' ignored\n";
		}
		else
		{
			try
			{
				DictionarySimpleTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "DictionarySimpleTest") == 0 || strcmp(execute_only, "DictionarySimpleTest::test_3") == 0)
		{
			try
			{
				DictionarySimpleTest::test_3();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_3' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_3' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_3' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_3' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_3' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_3' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "DictionarySimpleTest") == 0 || strcmp(*it, "DictionarySimpleTest::test_3") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_3' ignored\n";
		}
		else
		{
			try
			{
				DictionarySimpleTest::test_3();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_3' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_3' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_3' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_3' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_3' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "DictionarySimpleTest") == 0 || strcmp(execute_only, "DictionarySimpleTest::test_4") == 0)
		{
			try
			{
				DictionarySimpleTest::test_4();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_4' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_4' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_4' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_4' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_4' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_4' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "DictionarySimpleTest") == 0 || strcmp(*it, "DictionarySimpleTest::test_4") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_4' ignored\n";
		}
		else
		{
			try
			{
				DictionarySimpleTest::test_4();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_4' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_4' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_4' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_4' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'DictionarySimpleTest::test_4' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsIntTest") == 0 || strcmp(execute_only, "UsdsIntTest::test_1") == 0)
		{
			try
			{
				UsdsIntTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsIntTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsIntTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsIntTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsIntTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsIntTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsIntTest::test_1' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsIntTest") == 0 || strcmp(*it, "UsdsIntTest::test_1") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsIntTest::test_1' ignored\n";
		}
		else
		{
			try
			{
				UsdsIntTest::test_1();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsIntTest::test_1' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsIntTest::test_1' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsIntTest::test_1' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsIntTest::test_1' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsIntTest::test_1' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsIntTest") == 0 || strcmp(execute_only, "UsdsIntTest::test_2") == 0)
		{
			try
			{
				UsdsIntTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsIntTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsIntTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsIntTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsIntTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsIntTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsIntTest::test_2' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsIntTest") == 0 || strcmp(*it, "UsdsIntTest::test_2") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsIntTest::test_2' ignored\n";
		}
		else
		{
			try
			{
				UsdsIntTest::test_2();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsIntTest::test_2' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsIntTest::test_2' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsIntTest::test_2' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsIntTest::test_2' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsIntTest::test_2' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	test_number++;
	if(execute_only != 0)
	{
		if(strcmp(execute_only, "UsdsIntTest") == 0 || strcmp(execute_only, "UsdsIntTest::test_3") == 0)
		{
			try
			{
				UsdsIntTest::test_3();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsIntTest::test_3' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsIntTest::test_3' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsIntTest::test_3' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsIntTest::test_3' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsIntTest::test_3' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
		else
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsIntTest::test_3' ignored\n";
		}
	}
	else
	{
		bool need_ignore = false;
		for(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)
			if(strcmp(*it, "UsdsIntTest") == 0 || strcmp(*it, "UsdsIntTest::test_3") == 0)
				need_ignore = true;
		if(need_ignore)
		{
			ignored_test_number++;
			std::cout << "Test #" << test_number << " 'UsdsIntTest::test_3' ignored\n";
		}
		else
		{
			try
			{
				UsdsIntTest::test_3();
				successful_test_number++;
				std::cout << "Test #" << test_number << " 'UsdsIntTest::test_3' is passed\n";
			}
			catch (const char* error_text)
			{
				std::cout << "Test #" << test_number << " 'UsdsIntTest::test_3' is failed: " << error_text << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorStack & err)
			{
				std::cout << "Test #" << test_number << " 'UsdsIntTest::test_3' failed, unexpected error:\n" << err.getFullMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (usds::ErrorMessage & msg)
			{
				std::cout << "Test #" << test_number << " 'UsdsIntTest::test_3' failed, unexpected message:\n" << msg.getMessage() << "\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
			catch (...)
			{
				std::cout << "Test #" << test_number << " 'UsdsIntTest::test_3' failed: unexpected exception\n";
				if(stop_after_first_error) return test_number - successful_test_number;
			}
		}
	}

	// END AUTOGENERATED TESTS

	t = time(0);
	std::cout << std::asctime(std::localtime(&t)) << " End autotests\n";
	std::cout << "Success " << successful_test_number << " of " << test_number << std::endl;
	std::cout << "Ignored " << ignored_test_number << std::endl;

	if (!close_console)
	{
		std::cout << "Press any key\n";
		std::cin.get();

	}

	return (test_number - successful_test_number) - ignored_test_number;
}

