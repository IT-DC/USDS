# -*- coding: utf-8 -*- 

import io
import os
import re

#Read all tests

test_classes = {}

for root, dirs, files in os.walk("UnitTest"):
	for name in files:
		test_code_file = io.open(os.path.join(root, name), 'r', encoding='utf8')
		for line in test_code_file:
			if re.search("void [A-Za-z0-9_]+::[A-Za-z0-9_]+\(\)", line):
				class_name = re.sub("void ", "", line)
				class_name = re.sub("[\n\r\t ]+", "", class_name)
				class_name = re.sub("::[A-Za-z0-9_]+\(\)", "", class_name)
				method_name = re.sub("void ", "", line)
				method_name = re.sub("[\n\r\t ]+", "", method_name)
				method_name = re.sub("[A-Za-z0-9_]+::", "", method_name)
				method_name = re.sub("\(\)", "", method_name)
				if class_name in test_classes:
					if method_name in test_classes[class_name]:
						print "Duplicated method: " + test_classes + "::" + method_name
						exit()
					test_classes[class_name].append(method_name)
				else:
					test_classes[class_name] = [method_name]
		test_code_file.close()
	
#Generate head file
main_head_file = io.open("../Include/usdsAutotest.h", 'w', encoding='utf8')

main_head_file.write(u"#ifndef USDS_AUTOTEST_H\n")
main_head_file.write(u"#define USDS_AUTOTEST_H\n\n")
for class_def in test_classes:
	main_head_file.write(u"class " + class_def + u"\n")
	main_head_file.write(u"{\n")
	main_head_file.write(u"public:\n")
	for method_def in test_classes[class_def]:
		main_head_file.write(u"\tstatic void " + method_def + u"();\n")
	main_head_file.write(u"};\n\n")
main_head_file.write(u"#endif")
main_head_file.close()

#Generate code file
main_code_file = io.open("usdsAutotest.cpp", 'r', encoding='utf8')

output_lines = []
block_started = False

for line in main_code_file:
	if block_started:
		if line == "	// END AUTOGENERATED TESTS\n":
			block_started = False
			output_lines.append(line)
	else:
		if line == "	// BEGINT AUTOGENERATED TESTS\n":
			block_started = True
			output_lines.append(line + u"\n")
			for class_def in test_classes:
				for method_def in test_classes[class_def]:
					output_lines.append(u"\ttest_number++;\n")
					output_lines.append(u"\tif(execute_only != 0)\n")
					output_lines.append(u"\t{\n")
					output_lines.append(u"\t\tif(strcmp(execute_only, \"" + class_def + u"\") == 0 || strcmp(execute_only, \"" + class_def + u"::" + method_def + u"\") == 0)\n")
					output_lines.append(u"\t\t{\n")
					output_lines.append(u"\t\t\ttry\n")
					output_lines.append(u"\t\t\t{\n")
					output_lines.append(u"\t\t\t\t" + class_def + u"::" + method_def + u"();\n")
					output_lines.append(u"\t\t\t\tsuccessful_test_number++;\n")
					output_lines.append(u"\t\t\t\tstd::cout << \"Test #\" << test_number << \" '" + class_def + u"::" + method_def + "' is passed\\n\";\n")
					output_lines.append(u"\t\t\t}\n")
					output_lines.append(u"\t\t\tcatch (const char* error_text)\n")
					output_lines.append(u"\t\t\t{\n")
					output_lines.append(u"\t\t\t\tstd::cout << \"Test #\" << test_number << \" '" + class_def + u"::" + method_def + "' is failed: \" << error_text << \"\\n\";\n")
					output_lines.append(u"\t\t\t\tif(stop_after_first_error) return test_number - successful_test_number;\n")
					output_lines.append(u"\t\t\t}\n")
					output_lines.append(u"\t\t\tcatch (usds::ErrorStack & err)\n")
					output_lines.append(u"\t\t\t{\n")
					output_lines.append(u"\t\t\t\tstd::cout << \"Test #\" << test_number << \" '" + class_def + u"::" + method_def + "' failed, unexpected error:\\n\" << err.getFullMessage() << \"\\n\";\n")
					output_lines.append(u"\t\t\t\tif(stop_after_first_error) return test_number - successful_test_number;\n")
					output_lines.append(u"\t\t\t}\n")
					output_lines.append(u"\t\t\tcatch (usds::ErrorMessage & msg)\n")
					output_lines.append(u"\t\t\t{\n")
					output_lines.append(u"\t\t\t\tstd::cout << \"Test #\" << test_number << \" '" + class_def + u"::" + method_def + "' failed, unexpected message:\\n\" << msg.getMessage() << \"\\n\";\n")
					output_lines.append(u"\t\t\t\tif(stop_after_first_error) return test_number - successful_test_number;\n")
					output_lines.append(u"\t\t\t}\n")
					output_lines.append(u"\t\t\tcatch (...)\n")
					output_lines.append(u"\t\t\t{\n")
					output_lines.append(u"\t\t\t\tstd::cout << \"Test #\" << test_number << \" '" + class_def + u"::" + method_def + "' failed: unexpected exception\\n\";\n")
					output_lines.append(u"\t\t\t\tif(stop_after_first_error) return test_number - successful_test_number;\n")
					output_lines.append(u"\t\t\t}\n")
					output_lines.append(u"\t\t}\n")
					output_lines.append(u"\t\telse\n")
					output_lines.append(u"\t\t{\n")
					output_lines.append(u"\t\t\tignored_test_number++;\n")
					output_lines.append(u"\t\t\tstd::cout << \"Test #\" << test_number << \" '" + class_def + u"::" + method_def + "' ignored\\n\";\n")
					output_lines.append(u"\t\t}\n")
					output_lines.append(u"\t}\n")
					output_lines.append(u"\telse\n")
					output_lines.append(u"\t{\n")
					output_lines.append(u"\t\tbool need_ignore = false;\n")
					output_lines.append(u"\t\tfor(std::list<const char*>::iterator it=ignore_tests.begin(); it != ignore_tests.end(); ++it)\n")
					output_lines.append(u"\t\t\tif(strcmp(*it, \"" + class_def + u"\") == 0 || strcmp(*it, \"" + class_def + u"::" + method_def + u"\") == 0)\n")
					output_lines.append(u"\t\t\t\tneed_ignore = true;\n")
					output_lines.append(u"\t\tif(need_ignore)\n")
					output_lines.append(u"\t\t{\n")
					output_lines.append(u"\t\t\tignored_test_number++;\n")
					output_lines.append(u"\t\t\tstd::cout << \"Test #\" << test_number << \" '" + class_def + u"::" + method_def + "' ignored\\n\";\n")
					output_lines.append(u"\t\t}\n")
					output_lines.append(u"\t\telse\n")
					output_lines.append(u"\t\t{\n")
					output_lines.append(u"\t\t\ttry\n")
					output_lines.append(u"\t\t\t{\n")
					output_lines.append(u"\t\t\t\t" + class_def + u"::" + method_def + u"();\n")
					output_lines.append(u"\t\t\t\tsuccessful_test_number++;\n")
					output_lines.append(u"\t\t\t\tstd::cout << \"Test #\" << test_number << \" '" + class_def + u"::" + method_def + "' is passed\\n\";\n")
					output_lines.append(u"\t\t\t}\n")
					output_lines.append(u"\t\t\tcatch (const char* error_text)\n")
					output_lines.append(u"\t\t\t{\n")
					output_lines.append(u"\t\t\t\tstd::cout << \"Test #\" << test_number << \" '" + class_def + u"::" + method_def + "' is failed: \" << error_text << \"\\n\";\n")
					output_lines.append(u"\t\t\t\tif(stop_after_first_error) return test_number - successful_test_number;\n")
					output_lines.append(u"\t\t\t}\n")
					output_lines.append(u"\t\t\tcatch (usds::ErrorStack & err)\n")
					output_lines.append(u"\t\t\t{\n")
					output_lines.append(u"\t\t\t\tstd::cout << \"Test #\" << test_number << \" '" + class_def + u"::" + method_def + "' failed, unexpected error:\\n\" << err.getFullMessage() << \"\\n\";\n")
					output_lines.append(u"\t\t\t\tif(stop_after_first_error) return test_number - successful_test_number;\n")
					output_lines.append(u"\t\t\t}\n")
					output_lines.append(u"\t\t\tcatch (usds::ErrorMessage & msg)\n")
					output_lines.append(u"\t\t\t{\n")
					output_lines.append(u"\t\t\t\tstd::cout << \"Test #\" << test_number << \" '" + class_def + u"::" + method_def + "' failed, unexpected message:\\n\" << msg.getMessage() << \"\\n\";\n")
					output_lines.append(u"\t\t\t\tif(stop_after_first_error) return test_number - successful_test_number;\n")
					output_lines.append(u"\t\t\t}\n")
					output_lines.append(u"\t\t\tcatch (...)\n")
					output_lines.append(u"\t\t\t{\n")
					output_lines.append(u"\t\t\t\tstd::cout << \"Test #\" << test_number << \" '" + class_def + u"::" + method_def + "' failed: unexpected exception\\n\";\n")
					output_lines.append(u"\t\t\t\tif(stop_after_first_error) return test_number - successful_test_number;\n")
					output_lines.append(u"\t\t\t}\n")
					output_lines.append(u"\t\t}\n")
					output_lines.append(u"\t}\n\n")
			
		else:
			output_lines.append(line)

main_code_file.close()			

main_code_out_file = io.open("usdsAutotest.cpp", 'w', encoding='utf8')
for line in output_lines:
	main_code_out_file.write(line)
main_code_out_file.close()